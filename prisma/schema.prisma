// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum VoteType {
  UP
  DOWN
}

enum NotificationType {
  ANSWERED
  COMMENTED
  MENTIONED
}

enum AdminAction {
  DELETE_QUESTION
  DELETE_ANSWER
  EDIT_QUESTION
  EDIT_ANSWER
  DELETE_COMMENT
  EDIT_COMMENT
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions             Question[]
  answers               Answer[]
  comments              Comment[]
  votes                 Vote[]
  senderNotifications   Notification[] @relation("SenderNotifications")
  receiverNotifications Notification[] @relation("ReceiverNotifications")
  mentions              Mention[]
  adminPanel            AdminPanel[]
}

model Question {
  id          String   @id @default(uuid())
  title       String
  description String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User          @relation(fields: [userId], references: [id])
  answers Answer[]
  tags    QuestionTag[]
}

model Answer {
  id          String   @id @default(uuid())
  description String
  isApproved  Boolean  @default(false)
  status      String   @default("pending")
  userId      String
  questionId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  question Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id])
  votes    Vote[]
  comments Comment[]
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions QuestionTag[]
}

model QuestionTag {
  id         String @id @default(uuid())
  questionId String
  tagId      String

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id])

  @@unique([questionId, tagId])
}

model Vote {
  id        String   @id @default(uuid())
  userId    String
  answerId  String
  type      VoteType
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  answer Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@unique([userId, answerId])
}

model Notification {
  id         String           @id @default(uuid())
  senderId   String
  receiverId String
  type       NotificationType
  message    String
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())

  sender   User @relation("SenderNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceiverNotifications", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  answerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  answer   Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade)
  mentions Mention[]
}

model Mention {
  id              String @id @default(uuid())
  mentionedUserId String
  commentId       String

  mentionedUser User    @relation(fields: [mentionedUserId], references: [id])
  comment       Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model AdminPanel {
  id        String      @id @default(uuid())
  adminId   String
  action    AdminAction
  reason    String?
  timestamp DateTime    @default(now())

  admin User @relation(fields: [adminId], references: [id])
}
